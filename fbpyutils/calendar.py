"""
Functions to manipulate calendars.
"""

from datetime import date, datetime
from pandas import DataFrame
import pandas as pd
import numpy as np
import calendar as xcalendar

from typing import List

from fbpyutils import get_logger, datetime as dutl


_logger = get_logger()

def get_calendar(x: date, y: date) -> List:
    """Builds a calendar to be used as a time dimension.

    Args:
        x (date): The initial date for the calendar.
        y (date): The final date for the calendar. Must be greater than the initial date.

    Returns:
        List: A list of dictionaries, where each dictionary represents a day
              and contains various date-related attributes (e.g., year, month,
              day, week_day, quarter).

    Raises:
        ValueError: If the end date is not greater than the start date.
    """
    _logger.debug(f"Starting get_calendar with start_date: {x}, end_date: {y}")
    start_date, end_date = x, y
    if end_date <= start_date:
        _logger.error(f"Invalid end date: {end_date}. Must be greater than start date: {start_date}.")
        raise ValueError("Invalid end date. Must be greater than start date.")

    cal = None
    try:
        dates = pd.date_range(start_date, end_date)
        cal = [
            {
                "date": d.date(),
                "date_time": d,
                "year": d.year,
                "half": (d.quarter + 1) // 2,
                "quarter": d.quarter,
                "month": d.month,
                "day": d.day,
                "week_day": d.weekday(),
                "week_of_year": int(d.strftime("%W")),
                "date_iso": d.isoformat(),
                "date_str": d.strftime("%Y-%m-%d"),
                "week_day_name": d.strftime("%A"),
                "week_day_name_short": d.strftime("%a"),
                "week_month_name": d.strftime("%B"),
                "week_month_name_short": d.strftime("%b"),
                "year_str": d.strftime("%Y"),
                "year_half_str": d.strftime("%Y-H") + str((d.quarter + 1) // 2),
                "year_quarter_str": d.strftime("%Y-Q") + str(d.quarter),
                "year_month_str": d.strftime("%Y-%m"),
            }
            for d in dates
        ]
    except ValueError as e:
        _logger.error(f"Error building calendar: {e}")
        raise e
    _logger.debug("Finished get_calendar successfully.")

    return cal


def add_markers(x: List) -> List:
    """Adds temporal markers to a calendar list.

    This function enriches a calendar list (as generated by `get_calendar`)
    with boolean markers for common time-based analysis, such as 'today',
    'last_day_of_month', and 'last_12_months'.

    For dates in the current year, it uses precise calendar calculations. For past
    years, it determines markers based on the latest date available in the input
    for each period (month, quarter, half).

    Args:
        x (List): A calendar list, typically from `get_calendar`.

    Returns:
        List: The input calendar list with added boolean marker fields.
    """
    _logger.debug("Starting add_markers.")
    cal = x
    today = datetime.now().date()

    # For past years, compute group markers from the input
    markers = {}
    markers.update(
        {
            m: max(c["date"] for c in cal if c["year_month_str"] == m)
            for m in set(c["year_month_str"] for c in cal)
        }
    )
    markers.update(
        {
            m: max(c["date"] for c in cal if c["year_quarter_str"] == m)
            for m in set(c["year_quarter_str"] for c in cal)
        }
    )
    markers.update(
        {
            m: max(c["date"] for c in cal if c["year_half_str"] == m)
            for m in set(c["year_half_str"] for c in cal)
        }
    )

    for c in cal:
        d = c["date"]
        if d.year == today.year:
            # Use actual calendar calculations for the current year
            last_day_month = date(
                d.year, d.month, xcalendar.monthrange(d.year, d.month)[1]
            )
            quarter = (d.month - 1) // 3 + 1
            last_month = quarter * 3
            last_day_quarter = date(
                d.year, last_month, xcalendar.monthrange(d.year, last_month)[1]
            )
            if d.month <= 6:
                last_day_half = date(d.year, 6, xcalendar.monthrange(d.year, 6)[1])
            else:
                last_day_half = date(d.year, 12, xcalendar.monthrange(d.year, 12)[1])
        else:
            # Use the markers computed from the input for past years
            last_day_month = markers[c["year_month_str"]]
            last_day_quarter = markers[c["year_quarter_str"]]
            last_day_half = markers[c["year_half_str"]]

        # For last_day_of_year we always use the actual calendar last day
        last_day_year = date(d.year, 12, 31)

        c.update(
            {
                "today": d == today,
                "current_year": d.year == today.year,
                "last_day_of_month": d == last_day_month,
                "last_day_of_quarter": d == last_day_quarter,
                "last_day_of_half": d == last_day_half,
                "last_day_of_year": d == last_day_year,
                "last_24_months": d <= today and dutl.delta(today, d, "months") <= 24,
                "last_12_months": d <= today and dutl.delta(today, d, "months") <= 12,
                "last_6_months": d <= today and dutl.delta(today, d, "months") <= 6,
                "last_3_months": d <= today and dutl.delta(today, d, "months") <= 3,
            }
        )
    _logger.debug("Finished add_markers successfully.")
    return cal


def calendarize(
    x: DataFrame, date_column: str, with_markers: bool = False
) -> DataFrame:
    """Enriches a DataFrame with calendar columns based on a date column.

    Merges a complete calendar, including optional markers, into an existing
    DataFrame. The new columns are prefixed with 'calendar_'.

    Args:
        x (DataFrame): The input DataFrame.
        date_column (str): The name of the datetime column to be used for joining.
        with_markers (bool): If True, adds temporal markers to the calendar
                             before merging. Defaults to False.

    Returns:
        DataFrame: A new DataFrame with the added calendar columns.

    Raises:
        TypeError: If the input is not a Pandas DataFrame.
        NameError: If the specified date_column is not found or is not a
                   datetime type.
    """
    _logger.debug(f"Starting calendarize with date_column: {date_column}, with_markers: {with_markers}.")
    if not isinstance(x, pd.DataFrame):
        _logger.error(f"Invalid object type for calendarize. Expected Pandas DataFrame, got {type(x)}.")
        raise TypeError(f"Invalid object type. Expected Pandas DataFrame.")

    df = x.copy()

    if date_column not in df.columns or not np.issubdtype(df[date_column], np.datetime64):
        _logger.error(f"DateTime column not found or invalid: {date_column}.")
        raise NameError(f"DateTime column not found or invalid: {date_column}.")

    mind, maxd = min(df[date_column]), max(df[date_column])

    calendar = get_calendar(mind, maxd)
    if with_markers:
        add_markers(calendar)

    calendar = pd.DataFrame.from_dict(calendar)

    columns = ["_".join(["calendar", c]) for c in calendar.columns]
    calendar.columns = columns
    df[date_column] = df[date_column].dt.date

    _logger.debug("Finished calendarize successfully.")
    return df.merge(calendar, left_on=date_column, right_on="calendar_date")
